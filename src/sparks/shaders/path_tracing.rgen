#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "constants.glsl"
#include "material.glsl"
#include "mis.glsl"
#include "ray_payload.glsl"
#include "uniform_objects.glsl"

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform {
  GlobalUniformObject global_uniform_object;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;
layout(binding = 10) readonly buffer primitive_cdf_buffer {
  float primitive_cdf[];
};
layout(binding = 11) readonly buffer envmap_cdf_buffer {
  float envmap_cdf[];
};

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

#include "bsdf.glsl"
#include "direct_lighting.glsl"
#include "envmap.glsl"
#include "hit_record.glsl"
#include "random.glsl"
#include "trace_ray.glsl"
#include "vertex.glsl"

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  float mis_scale = 1.0;
  for (int b = 0; b < global_uniform_object.num_bounces; b++) {
    TraceRay(origin, direction);

    if (global_uniform_object.enable_mis && b != 0) {
      float direct_lighting_pdf = EstimateDirectLightingPdf();
      mis_scale = PowerHeuristic(mis_scale, direct_lighting_pdf);
    }

    if (ray_payload.t == -1.0) {
      radiance += mis_scale * throughput * SampleEnvmap(direction) *
                  global_uniform_object.envmap_scale;
      break;
    }

    Material m = materials[ray_payload.object_id];

    hit_record = GetHitRecord(ray_payload, origin, direction);

    if (global_uniform_object.output_selection == 1) {
      return (hit_record.normal + 1.0) * 0.5;
    } else if (global_uniform_object.output_selection == 2) {
      return (hit_record.tangent + 1.0) * 0.5;
    } else if (global_uniform_object.output_selection == 3) {
      return (hit_record.bitangent + 1.0) * 0.5;
    } else if (global_uniform_object.output_selection == 4) {
      return (hit_record.shading_normal + 1.0) * 0.5;
    } else if (global_uniform_object.output_selection == 5) {
      return (hit_record.geometry_normal + 1.0) * 0.5;
    } else if (global_uniform_object.output_selection == 6) {
      return (hit_record.front_face ? vec3(1, 0, 0) : vec3(0, 0, 1)) *
             dot(hit_record.geometry_normal, -direction);
    }

    radiance += throughput * hit_record.emission *
                hit_record.emission_strength * mis_scale;

    vec3 eval;
    vec3 omega_in;
    float pdf;

    if (global_uniform_object.enable_mis) {
      SampleDirectLighting(eval, omega_in, pdf);
      if (pdf > 0.0) {
        float bsdf_pdf;
        vec3 bsdf_eval = EvalBSDF(omega_in, bsdf_pdf);
        radiance +=
            bsdf_eval * eval * throughput * PowerHeuristic(pdf, bsdf_pdf);
      }
    }

    SampleBSDF(eval, omega_in, pdf);
    if (pdf < 1e-5) {
      break;
    }

    throughput *= eval / pdf;
    origin = hit_record.position;
    direction = omega_in;

    if (global_uniform_object.enable_mis) {
      mis_scale = pdf;
    }

    // Russian Roulette
    float rrp =
        clamp(max(throughput.x, max(throughput.y, throughput.z)), 0.0, 1.0);
    if (RandomFloat() > rrp) {
      break;
    } else {
      throughput /= rrp;
    }
  }
  return radiance;
}

void main() {
  hit_record.hit_entity_id = 0;
  hit_record.position = vec3(0);
  hit_record.normal = vec3(0);
  hit_record.shading_normal = vec3(0);
  hit_record.geometry_normal = vec3(0);
  hit_record.tangent = vec3(0);
  hit_record.bitangent = vec3(0);
  hit_record.tex_coord = vec2(0);
  hit_record.front_face = true;
  hit_record.base_color = vec3(0);
  hit_record.omega_v = vec3(0);

  hit_record.subsurface_color = vec3(1.0);
  hit_record.subsurface = 0.0;
  hit_record.subsurface_radius = vec3(1.0);
  hit_record.metallic = 0.0;
  hit_record.specular = 0.0;
  hit_record.specular_tint = 0.0;
  hit_record.roughness = 0.0;
  hit_record.anisotropic = 0.0;
  hit_record.anisotropic_rotation = 0.0;
  hit_record.sheen = 0.0;
  hit_record.sheen_tint = 0.0;
  hit_record.clearcoat = 0.0;
  hit_record.clearcoat_roughness = 0.0;
  hit_record.ior = 1.0;
  hit_record.transmission = 0.0;
  hit_record.transmission_roughness = 0.0;

  hit_record.emission = vec3(0);
  hit_record.emission_strength = 0.0;
  hit_record.alpha = 1.0;
  hit_record.material_type = 0;

  mat4 camera_to_world = inverse(global_uniform_object.camera);
  mat4 screen_to_camera = inverse(global_uniform_object.projection);

  vec3 total_radiance = vec3(0.0);

  for (int i = 0; i < global_uniform_object.num_samples; i++) {
    InitRandomSeed(uint(gl_LaunchIDEXT.x), uint(gl_LaunchIDEXT.y),
                   global_uniform_object.accumulated_sample + i);

    const vec2 pixelCenter =
        vec2(gl_LaunchIDEXT.xy) + vec2(RandomFloat(), RandomFloat());
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec3 origin =
        vec3(camera_to_world *
             vec4(RandomInCircle() * global_uniform_object.aperture, 0, 1));
    vec3 target = vec3(screen_to_camera * vec4(d.x, d.y, 1.0, 1.0));
    target = normalize(target);
    target *= -global_uniform_object.focal_length / target.z;
    target = vec3(camera_to_world * vec4(target, 1.0));
    vec3 direction = normalize(target - origin);
    total_radiance +=
        clamp(SampleRay(origin, direction), 0.0, global_uniform_object.clamp);
  }

  imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                 vec4(total_radiance, 1.0));
  imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) +
                 float(global_uniform_object.num_samples));
}
