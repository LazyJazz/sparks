#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);
  vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
  vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
  vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

  float tmin = 0.001;
  float tmax = 10000.0;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin,
              direction.xyz, tmax, 0);

  imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                 vec4(ray_payload.barycentric, 1.0));
  imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
             imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
}
